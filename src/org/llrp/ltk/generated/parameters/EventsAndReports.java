/*
 *
 * This file was generated by LLRP Code Generator
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/
 * for more information
 * Generated on: Sun Apr 08 14:14:11 EDT 2012;
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 */
package org.llrp.ltk.generated.parameters;

import maximsblog.blogspot.com.llrpexplorer.Logger;

import org.jdom2.Content;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.Namespace;

import org.llrp.ltk.exceptions.InvalidLLRPMessageException;
import org.llrp.ltk.exceptions.MissingParameterException;
import org.llrp.ltk.generated.LLRPConstants;
import org.llrp.ltk.types.Bit;
import org.llrp.ltk.types.BitList;
import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.types.LLRPMessage;
import org.llrp.ltk.types.SignedShort;
import org.llrp.ltk.types.TLVParameter;
import org.llrp.ltk.types.TVParameter;
import org.llrp.ltk.types.UnsignedShort;

import java.util.LinkedList;
import java.util.List;


/**
 * This parameter controls the behavior of the Reader when a new LLRP connection is established. In a SET_READER_CONFIG message, this parameter is used to enable or disable the holding of events and reports upon connection using the HoldEventsAndReportsUponReconnect field. In a GET_READER_CONFIG message, this parameter reports the current configuration. If the HoldEventsAndReportsUponReconnect is true, the reader will not deliver any reports or events (except the ConnectionAttemptEvent) to the Client until the Client issues an ENABLE_EVENTS_AND_REPORTS message. Once the ENABLE_EVENTS_AND_REPORTS message is received the reader ceases its hold on events and reports for the duration of the connection.

See also {@link <a href="http://www.epcglobalinc.org/standards/llrp/llrp_1_0_1-standard-20070813.pdf#page=75&view=fit">LLRP Specification Section 12.2.6.4</a>}
 and {@link <a href="http://www.epcglobalinc.org/standards/llrp/llrp_1_0_1-standard-20070813.pdf#page=142&view=fit">LLRP Specification Section 16.2.6.10</a>}


 */

/**
 * This parameter controls the behavior of the Reader when a new LLRP connection is established. In a SET_READER_CONFIG message, this parameter is used to enable or disable the holding of events and reports upon connection using the HoldEventsAndReportsUponReconnect field. In a GET_READER_CONFIG message, this parameter reports the current configuration. If the HoldEventsAndReportsUponReconnect is true, the reader will not deliver any reports or events (except the ConnectionAttemptEvent) to the Client until the Client issues an ENABLE_EVENTS_AND_REPORTS message. Once the ENABLE_EVENTS_AND_REPORTS message is received the reader ceases its hold on events and reports for the duration of the connection.

See also {@link <a href="http://www.epcglobalinc.org/standards/llrp/llrp_1_0_1-standard-20070813.pdf#page=75&view=fit">LLRP Specification Section 12.2.6.4</a>}
 and {@link <a href="http://www.epcglobalinc.org/standards/llrp/llrp_1_0_1-standard-20070813.pdf#page=142&view=fit">LLRP Specification Section 16.2.6.10</a>}

      .
 */
public class EventsAndReports extends TLVParameter {
    public static final SignedShort TYPENUM = new SignedShort(226);
    private static final Logger LOGGER = Logger.getLogger(EventsAndReports.class);
    protected Bit holdEventsAndReportsUponReconnect;
    protected BitList reserved0 = new BitList(7);

    /**
     * empty constructor to create new parameter.
     */
    public EventsAndReports() {
    }

    /**
     * Constructor to create parameter from binary encoded parameter
     * calls decodeBinary to decode parameter.
     * @param list to be decoded
     */
    public EventsAndReports(LLRPBitList list) {
        decodeBinary(list);
    }

    /**
    * Constructor to create parameter from xml encoded parameter
    * calls decodeXML to decode parameter.
    * @param element to be decoded
    */
    public EventsAndReports(Element element) throws InvalidLLRPMessageException {
        decodeXML(element);
    }

    /**
    * {@inheritDoc}
    */
    public LLRPBitList encodeBinarySpecific() {
        LLRPBitList resultBits = new LLRPBitList();

        if (holdEventsAndReportsUponReconnect == null) {
            LOGGER.warn(" holdEventsAndReportsUponReconnect not set");
            throw new MissingParameterException(
                " holdEventsAndReportsUponReconnect not set  for Parameter of Type EventsAndReports");
        }

        resultBits.append(holdEventsAndReportsUponReconnect.encodeBinary());
        resultBits.append(reserved0.encodeBinary());

        return resultBits;
    }

    /**
    * {@inheritDoc}
    */
    public Content encodeXML(String name, Namespace ns) {
        // element in namespace defined by parent element
        Element element = new Element(name, ns);
        // child element are always in default LLRP namespace
        ns = Namespace.getNamespace("llrp", LLRPConstants.LLRPNAMESPACE);

        if (holdEventsAndReportsUponReconnect == null) {
            LOGGER.warn(" holdEventsAndReportsUponReconnect not set");
            throw new MissingParameterException(
                " holdEventsAndReportsUponReconnect not set");
        } else {
            element.addContent(holdEventsAndReportsUponReconnect.encodeXML(
                    "HoldEventsAndReportsUponReconnect", ns));
        }

        //element.addContent(reserved0.encodeXML("reserved",ns));
        //parameters
        return element;
    }

    /**
    * {@inheritDoc}
    */
    protected void decodeBinarySpecific(LLRPBitList binary) {
        int position = 0;
        int tempByteLength;
        int tempLength = 0;
        int count;
        SignedShort type;
        int fieldCount;
        Custom custom;
        holdEventsAndReportsUponReconnect = new Bit(binary.subList(position,
                    Bit.length()));
        position += Bit.length();
        position += reserved0.length();
    }

    /**
    * {@inheritDoc}
    */
    public void decodeXML(Element element) throws InvalidLLRPMessageException {
        List<Element> tempList = null;
        boolean atLeastOnce = false;
        Custom custom;

        Element temp = null;

        // child element are always in default LLRP namespace
        Namespace ns = Namespace.getNamespace(LLRPConstants.LLRPNAMESPACE);

        temp = element.getChild("HoldEventsAndReportsUponReconnect", ns);

        if (temp != null) {
            holdEventsAndReportsUponReconnect = new Bit(temp);
        }

        element.removeChild("HoldEventsAndReportsUponReconnect", ns);

        if (element.getChildren().size() > 0) {
            String message = "EventsAndReports has unknown element " +
                ((Element) element.getChildren().get(0)).getName();
            throw new InvalidLLRPMessageException(message);
        }
    }

    //setters
    /**
    * set   holdEventsAndReportsUponReconnect of type Bit .
    * @param   holdEventsAndReportsUponReconnect to be set
    */
    public void setHoldEventsAndReportsUponReconnect(
        final Bit holdEventsAndReportsUponReconnect) {
        this.holdEventsAndReportsUponReconnect = holdEventsAndReportsUponReconnect;
    }

    // end setter

    //getters
    /**
    * get   holdEventsAndReportsUponReconnect of type Bit.
    * @return   type Bit to be set
    */
    public Bit getHoldEventsAndReportsUponReconnect() {
        return this.holdEventsAndReportsUponReconnect;
    }

    // end getters

    //add methods

    // end add

    /**
    * For TLV Parameter length can not be determined at compile time. This method therefore always returns 0.
    * @return Integer always zero
    */
    public static Integer length() {
        return 0;
    }

    /**
    * {@inheritDoc}
    */
    public SignedShort getTypeNum() {
        return TYPENUM;
    }

    /**
    * {@inheritDoc}
    */
    public String getName() {
        return "EventsAndReports";
    }

    /**
    * return string representation. All field values but no parameters are included
    * @return String
    */
    public String toString() {
        String result = "EventsAndReports: ";
        result += ", holdEventsAndReportsUponReconnect: ";
        result += holdEventsAndReportsUponReconnect;

        result = result.replaceFirst(", ", "");

        return result;
    }
}
